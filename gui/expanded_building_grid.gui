@expanded_building_grid_panel_width = 540

types building_item_types
{
	type expanded_building_grid_header_building_item = 	widget {
		size = { @expanded_building_grid_panel_width 40 }
		
			button = {
				parentanchor = top
				using = default_button
				size = { @expanded_building_grid_panel_width 40 }
				alpha = "[TransparentIfFalse(Building.IsActive)]"
				onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"

					flowcontainer = {
						parentanchor = vcenter
						spacing = 10
						
						container = {
							alpha = "[TransparentIfFalse(Building.IsActive)]"
							button = {
								onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
								size = { 35 35 }
							}
							icon = {
								parentanchor = vcenter
								texture = "[Building.GetIcon]"
								size = { 35 35 }
							}
						}
						
						textbox = {
							block "text" {
								text = ""
							}
							autoresize = yes
							align = left|nobaseline
							default_format = "#title"
							parentanchor = vcenter
						}
					
						textbox = {		
							tooltip = "[Building.GetEmploymentTooltip]"
							align = left|nobaseline
							autoresize = yes
							text = "[Building.GetExpansionLevelDesc]"
							using = fontsize_xl
							parentanchor = vcenter
						}
					}

					flowcontainer = {
						parentanchor = right|vcenter
						position = { -70 0 }
						direction = horizontal
						spacing = 10
						
						flowcontainer = {
							direction = horizontal
							parentanchor = vcenter
							spacing = 25
							
							widget = {
								parentanchor = vcenter|left
								visible = "[Building.IsActive]"
								size = { 30 30 }
								
								icon = {
									using = rotate_glow_blue
									size = { 130% 130% }
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
									alwaystransparent = yes
									parentanchor = center
									using = default_fade_in_out
								}
								
								button_icon_round_action = {
									size = { 100% 100% }
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
									enabled = "[IsValid( Building.ToggleSubsidies )]"
									onclick = "[Execute( Building.ToggleSubsidies )]" 
									tooltip = SUBSIDIZED_YES
									
									blockoverride "icon" {
										texture = "gfx/interface/production_methods/subsidized.dds"
									}
									blockoverride "icon_size" {
										size = { 80% 80% }
									}
								}
								
								button_icon_round_action = {
									size = { 100% 100% }							
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Not(Building.IsSubsidized))]"
									enabled = "[IsValid( Building.ToggleSubsidies )]"
									onclick = "[Execute( Building.ToggleSubsidies )]" 
									tooltip = SUBSIDIZED_NO
									
									blockoverride "icon" {
										texture = "gfx/interface/production_methods/subsidized_not.dds"
									}
									blockoverride "icon_size" {
										size = { 80% 80% }
									}
								}
							}
							
									textbox = {
										visible = "[And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsidized))]"
										alpha = "[TransparentIfFalse(Building.IsActive)]"
										parentanchor = vcenter
										minimumsize = { 60 -1 }
										text = "@money![Building.GetTaxationRevenue|+=d]#!"
										align = right|nobaseline
										autoresize = yes
										max_width = 52
										fontsize_min = 12
										tooltip = "[Building.GetTaxationRevenueTooltip]"
									}
		
									textbox = {
										visible = "[Building.IsGovernmentFunded]"	
										alpha = "[TransparentIfFalse(Building.IsActive)]"
										parentanchor = vcenter	
										minimumsize = { 60 -1 }									
										text = "@money![Subtract_CFixedPoint(Building.GetTaxationRevenue, Building.GetGovernmentExpenses)|+=d]#!"
										align = right|nobaseline
										autoresize = yes
										widgetanchor = vcenter|left
										max_width = 52
										fontsize_min = 12
										tooltip = "[Building.GetGovernmentExpensesDesc]"
									}
									
									textbox = {
										visible = "[Building.IsSubsidized]"
										parentanchor = vcenter										
										minimumsize = { 60 -1 }									
										text = "@money![Subtract_CFixedPoint(Building.GetTaxationRevenue, Building.GetSubsidies)|+=d]#!"
										align = right|nobaseline
										autoresize = yes
										widgetanchor = vcenter|left
										max_width = 52
										fontsize_min = 12									
										tooltip = "SUBSIDIZED_YES_HEADER"
									}
						}
						
						### EMPLOYMENT
						
						widget = {
							size = { 120 30 }
							widget = {
								parentanchor = top|hcenter
								visible = "[Building.IsActive]"
								position = { 0 4 }
								size = { 120 20 }
								alpha = "[TransparentIfFalse(Building.IsActive)]"
								default_progressbar_horizontal = {
									tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
									size = { 100% 100% }

									blockoverride "values" {
										value = "[FixedPointToFloat(Building.GetEmploymentPercentage)]"
										min = 0
										max = 1
									}
								}

								container ={
									visible = "[Not(LessThan_CFixedPoint(Building.GetEmploymentPercentage, GetDefine('NGUI', 'BUILDING_CONSIDERED_FULLY_EMPLOYED')))]"
									parentanchor = vcenter|hcenter
									textbox = {
										text = "[Building.GetNoOfEmployed|1*]"
										margin_bottom = 5
										margin_top = 5
										align = center|nobaseline
										autoresize = yes
										tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
									}
								}
								flowcontainer = {
									parentanchor = vcenter|hcenter
									visible = "[LessThan_CFixedPoint(Building.GetEmploymentPercentage, GetDefine('NGUI', 'BUILDING_CONSIDERED_FULLY_EMPLOYED'))]"
									textbox = {
										text = "[Building.GetNoOfEmployed|1*]"
										margin_bottom = 5
										margin_top = 5
										align = hcenter|nobaseline
										autoresize = yes
										parentanchor = vcenter
										widgetanchor = vcenter
										tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
									}
								
									textbox = {
										text = " / [Building.GetEmployeeCap|1*]"
										align = hcenter|nobaseline
										autoresize = yes
										parentanchor = vcenter
										widgetanchor = vcenter
										tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
									}
								}
							}
						}
					}
						### PRODUCTIVITY
						flowcontainer = {
							parentanchor = right|vcenter
							position = { -10 0 }
								textbox = {
								visible = "[And(And(Building.IsSelfFunded, Building.IsActive), Not(Building.IsSubsistenceBuilding))]"
								text = "#v @money![Building.GetAverageAnnualEarningsPerEmployeeFormatted|1+]#!"
								autoresize = yes
								align = right|nobaseline
								parentanchor = vcenter
						
								tooltip = "TOOLTIP_BUILDING_PRODUCTIVITY"
								tooltipwidget = {
									GraphTooltip_Productivity = {}
								}
							}
						}			

					flowcontainer = {
						visible = "[And(And(Building.IsSelfFunded, Building.IsActive), Building.IsSubsistenceBuilding)]"
						datacontext = "[Building.AccessPopsList]"
						datacontext = "[Building]"
						datamodel = "[PopList.GetItems]"
						position = { -10 0 }
						parentanchor = right|vcenter
						
						item = {					
							textbox = {
								tooltip = "ANNUAL_WAGE_TOOLTIP"
								visible = "[And(PopListItem.GetPopType.HasSubsistenceIncome,GreaterThan_int64(Building.GetMaxPopSize(PopListItem.GetPopType),'(int64)0'))]"
								raw_text = "@money![PopListItem.GetAverageAnnualWage|v1]"
								autoresize = yes
								align = right|nobaseline
							}
						}	
					}
				
			}
		}
	
	
		type building_tax_with_ownership = flowcontainer {
		direction = vertical
		alpha = "[TransparentIfFalse( Or( GreaterThan_int32(Building.GetExpansionLevel, '(int32)0'), Building.HasConstructionQueued ))]"

		### TAX/BALANCE

		widget = {
					size = { 135 15 }
					parentanchor = hcenter 
					widget = {
						visible = "[And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsidized))]"
						size = { 135 15 }
						parentanchor = hcenter
						widget = {
							parentanchor = hcenter
							visible = "[Building.IsActive]"
							textbox = {
								text = "@money![Building.GetTaxationRevenue|+=d]#!"
								parentanchor = hcenter
								using = tooltip_above
								using = fontsize_small
								elide = right
								autoresize = yes
								align = nobaseline
							}
						}
						tooltip = "[Building.GetTaxationRevenueTooltip]"
					}
					widget = {
						visible = "[Building.IsGovernmentFunded]"
						size = { 135 15 }
						parentanchor = hcenter
						widget = {
							parentanchor = hcenter
							visible = "[Building.IsActive]"
							textbox = {
								text = "@money![Subtract_CFixedPoint(Building.GetTaxationRevenue, Building.GetGovernmentExpenses)|+=d]#!"
								parentanchor = hcenter
								using = tooltip_above
								fontsize = 15
								elide = right
								autoresize = yes
								align = nobaseline
							}
						}
						tooltip = "[Building.GetGovernmentExpensesDesc]"
					}
					widget = {
						visible = "[Building.IsSubsidized]"
						size = { 135 15 }
						parentanchor = hcenter 
						widget = {
							parentanchor = hcenter
							visible = "[Building.IsActive]"
							textbox = {
								text = "@money![Subtract_CFixedPoint(Building.GetTaxationRevenue, Building.GetSubsidies)|+=d]#!"
								parentanchor = hcenter
								using = tooltip_above
								using = fontsize_small
								elide = right
								autoresize = yes
								align = nobaseline

							}
						}
						tooltip = "SUBSIDIZED_YES_HEADER"
					}
				}
			

					widget = {
						size = { 135 20 }
						parentanchor = hcenter
						visible = "[And( Not(Building.HasTradeRouteRevenue), And( Not(Building.IsUrbanCenter), And( And( IsDataModelEmpty(Building.GetBuildingAssets), Not(Building.IsGovernmentFunded) ), NotEqualTo_int32(Building.GetExpansionLevel, '(int32)0'))))]"
						widget = { 
						    size = { 135 20 }
						    visible = "[And( Not(Building.HasTradeRouteRevenue), And( Not(Building.IsUrbanCenter), And( And( IsDataModelEmpty(Building.GetBuildingAssets), Not(Building.IsGovernmentFunded) ), NotEqualTo_int32(Building.GetExpansionLevel, '(int32)0'))))]"
							parentanchor = hcenter
						textbox = {
							name = "tutorial_highlight_weekly_balance_building"
							text = "@money!#v [Building.GetBalance|D+=]#!"
							parentanchor = hcenter
							using = tooltip_above
							using = fontsize_small
							autoresize = yes
							elide = right
							align = nobaseline
						}
					}
					tooltip = "[Building.GetBalanceDesc]"
				}
                    widget = {
						size = { 135 15 }
						parentanchor = hcenter
						visible = "[Or( Not(IsDataModelEmpty(Building.GetBuildingAssets)), Or( Building.IsUrbanCenter, Building.HasTradeRouteRevenue))]"
						widget = { 
						    size = { 135 15 }
						    visible = "[Or( Not(IsDataModelEmpty(Building.GetBuildingAssets)), Or( Building.IsUrbanCenter, Building.HasTradeRouteRevenue))]"
							parentanchor = hcenter
						textbox = {
							name = "tutorial_highlight_weekly_balance_building"
							text = "@money!#v [Building.GetBalance|D+=]#!"
							parentanchor = hcenter
							using = tooltip_above
							autoresize = yes
							elide = right
							align = nobaseline
							using = fontsize_small

						}
					}
					tooltip = "[Building.GetBalanceDesc]"
				 
			}
			
		block "building_size_small_ownership_chart"
		{	
			simple_building_ownership_stacked_barchart = {
				using = visible_if_ownership_can_be_split
				parentanchor = hcenter
			}
		}
	}

	type expanded_building_grid_building_item = widget {

		highlight_tutorial_ui = {
			visible = "[Building.IsBeingTutorialHighlighted]"
		}
		onmousehierarchyenter = "[AccessHighlightManager.HighlightBuilding(Building.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no

		size = { 135 255 }
		button  = {
			onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
			onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
			tooltipwidget = {
				FancyTooltip_Building = {}
			}
			using = tooltip_es

			flowcontainer = {
				direction = vertical
				resizeparent = yes

				background = {
					using = entry_bg_simple
				}

				button = {
					using = default_button
					enabled = "[Building.IsValid]"
					onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
					onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"

					textbox = {
						resizeparent = yes
						text = "[Building.GetNameNoFormatting]"
						autoresize = yes
						minimumsize = { 135 35 }
						maximumsize = { 135 35 }
						align = hcenter|nobaseline
						parentanchor = hcenter
						margin = { 13 5 }
						elide = right
						using = fontsize_small
					}			
				}

				widget = {
					size = { 135 135 }
					
					building_item_button = {
						icon = {
							visible = "[Building.IsBeingTutorialHighlighted]"
							using = highlighted_square_selection
						}
					}
                
		### AUTO EXPAND BUTTON AND SUBSIDIES
					### WAGES / GOVERNMENT BUILDING
                    container = {
						position = { -5 4 }
						parentanchor = top|right
						flowcontainer = {
							parentanchor = right
							direction = vertical

							textbox = {
								parentanchor = right
								alpha = "[TransparentIfTrue(Building.IsSubsidized)]"
								visible = "[And(Not(Building.IsGovernmentFunded), Building.IsActive)]"
								raw_text = "#v @money![Building.GetAverageAnnualEarningsPerEmployeeFormatted|1+]#!"
								align = right|nobaseline
								autoresize = yes
								minimumsize = { 23 27 }
								margin_right = 6

								using = tooltip_above
								tooltip = "TOOLTIP_BUILDING_PRODUCTIVITY"
								tooltipwidget = {
									GraphTooltip_Productivity = {}
								}
								background = {
									using = dark_area
								}
							}

							icon = {
								parentanchor = right
								texture = "gfx/interface/icons/generic_icons/government_building_icon.dds"
								alwaystransparent = no
								size = { 23 23 }
								visible = "[And(Building.IsGovernmentFunded, Building.IsActive)]"
								tooltip = "TOOLTIP_BUILDINGS_BUDGET"
								using = tooltip_above
							}

							### subsidize
							widget = {
								visible = "[Not(Building.IsGovernmentFunded)]"
								parentanchor = right
								size = { 80 30 }

								textbox = {
									datacontext = "[Building]"
									raw_text = "#N @money!#bold -[Building.GetSubsidies|D]#!"
									tooltip = "[Building.GetSubsidiesDesc]"
									autoresize = yes
									position = { 0 0 }
									align = left|nobaseline
									parentanchor = right|vcenter
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
									alpha = 0

									state = {
										name = _show
										position_x = -34
										alpha = 1
										duration = 0.2
										using = Animation_Curve_Default
									}
									state = {
										name = _hide
										alpha = 0
										duration = 0.4
										position_x = 0
										using = Animation_Curve_Default
									}

									background = {
										using = dark_area
									}
								}

								widget = {
									size = { 29 29 }
									parentanchor = right

									icon = {
										using = rotate_glow_blue
										size = { 130% 130% }
										visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
										alwaystransparent = yes
										parentanchor = center
										using = default_fade_in_out
									}
									button_icon_round_action = {
										size = { 100% 100% }
										visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
										enabled = "[IsValid( Building.ToggleSubsidies )]"
										onclick = "[Execute( Building.ToggleSubsidies )]"
										tooltip = SUBSIDIZED_YES
										using = icon_toggle_single_off_sound

										blockoverride "icon" {
											texture = "gfx/interface/production_methods/subsidized.dds"
										}
										blockoverride "icon_size" {
											size = { 80% 80% }
										}
									}

									button_icon_round_action = {
										size = { 100% 100% }
										visible = "[And(Building.GetBuildingType.CanBeSubsidized,Not(Building.IsSubsidized))]"
										enabled = "[IsValid( Building.ToggleSubsidies )]"
										onclick = "[Execute( Building.ToggleSubsidies )]"
										tooltip = SUBSIDIZED_NO
										using = icon_toggle_single_on_sound

										blockoverride "icon" {
											texture = "gfx/interface/production_methods/subsidized_not.dds"
										}
										blockoverride "icon_size" {
											size = { 80% 80% }
										}
									}
								}
							}
						 building_auto_expand_toggle = {
							visible = "[IsPotential( Building.ToggleAutoExpand )]"
							size = { 29 29 }
							parentanchor = right
						}

						widget = {
							visible = "[Not(IsPotential( Building.ToggleAutoExpand ))]"
							size = { 29 29 }
							parentanchor = right
						}			  
		
						  building_privatize_toggle = {
							visible = "[IsValid( Building.TogglePrivatization )]"
						    size = {29 29}
							parentanchor = right
						    }
						   
						}
					}
                


					### LEVEL
					container = {
						position = { 5 4 }
						parentanchor = top|left

						tooltip = "[Building.GetEmploymentTooltip]"
						using = tooltip_above

						background = {
							using = dark_area
						}
						
						textbox = {
							minimumsize = { -1 27 }
							autoresize = yes
							margin_right = 6
							margin_left = 6
							align = left|nobaseline
							text = "[Building.GetExpansionLevelDesc]"
						}
					}

					### CASH PROGRESSBAR
					flowcontainer = {
						position = { 0 -10 }
						parentanchor = bottom|hcenter
						direction = vertical
						spacing = 7

						### BUILDING PROGRESS
						default_progressbar_horizontal = {
							size = { 60 12 }
							visible = "[Building.HasConstructionQueued]"
							tooltip = "BUILDING_PROGRESS_TOOLTIP"
							blockoverride "values" {
								value = "[Building.GetConstructionProgressPercentage]"
								min = 0
								max = 1
							}
							alpha = 1
							alwaystransparent = no

							textbox = {
								text = "#bold [Building.GetConstructionRemainingWeeksDesc]#!"
								size = { 53 20 }
								align = center|nobaseline
								elide = right
								fontsize_min = 12
								parentanchor = vcenter
								position = { 4 0 }
							}
						}

						widget = {
							size = { 60 12 }
							alpha = "[TransparentIfFalse(Building.IsActive)]"
							visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"
							using = cash_reserves_tooltip_with_graph

							gold_progressbar_horizontal = {
								size = { 100% 100% }
								alpha = "[TransparentIfFalse(Building.IsActive)]"
								visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"

								blockoverride "glow_size" {
									size = { 40 100% }
								}

								blockoverride "values" {
									min = 0
									max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
									value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
								}
							}

							changed_value_decreased_progressbar_horizontal = {
								size = { 100% 100% }
								visible = "[GreaterThan_CFixedPoint(GetPrevTrendValue(Building.GetCashReservesTrend), GetTrendValue(Building.GetCashReservesTrend))]"

								blockoverride "second_progressbar" {}

								blockoverride "values" {
									min = 0
									max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
									value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
								}
								blockoverride "glow_size" {
									size = { 40 100% }
								}
								blockoverride "arrow_texture_density" {
									texture_density = 13 #use to match height of progressbar
								}
							}

							changed_value_increased_progressbar_horizontal = {
								size = { 100% 100% }
								visible = "[GreaterThan_CFixedPoint(GetTrendValue(Building.GetCashReservesTrend), GetPrevTrendValue(Building.GetCashReservesTrend))]"

								blockoverride "second_progressbar" {}

								blockoverride "values" {
									min = 0
									max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
									value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
								}
								blockoverride "glow_size" {
									size = { 40 100% }
								}
								blockoverride "arrow_texture_density" {
									texture_density = 13 #use to match height of progressbar
								}
							}

							progressbar_highlight = {
								visible = "[GreaterThanOrEqualTo_CFixedPoint(Building.GetCurrentCashReserves, Building.GetMaxCashReserves)]"
							}
						}
					}

						flowcontainer = {
						direction = vertical
						parentanchor = left 
						margin_left = 5
						margin_top = 5
						position = { 0 31 }

						employment_indicator_icon = {
							visible = "[LessThan_CFixedPoint(Building.GetEmploymentPercentage, GetDefine('NGUI', 'BUILDING_CONSIDERED_FULLY_EMPLOYED'))]"
						}

						### INPUT WARNING
						icon = {
							size = { 28 28 }
							visible = "[Building.HasAnyInputShortage]"
							texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
							tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
						}

						### AUTO DOWNSIZE WARNING
						icon = {
							size = { 28 28 }
							visible = "[Building.IsAutoDownsizing]"
							texture = "gfx/interface/production_methods/auto_downsize.dds"
							tooltip = "[Building.GetAutoDownsizeTooltip]"
						}
					}
				}
				
					container = {
					minimumsize = { 135 50 }
					using = building_size_tooltip_with_ownership
					

					background = {
						using = entry_bg
						margin = { -3 1 }
					}

					building_tax_with_ownership = {
						parentanchor = center
					}

					### DOWNSIZE
					button_icon_minus_action = {
						size = { 28 28 }
						parentanchor = vcenter
						position = { 5 0 }
						tooltip = "[Building.GetDownsizeTooltip]"
						onclick = "[Execute( Building.Downsize )]"
						enabled = "[IsValid( Building.Downsize )]"
						visible = "[And(And( And( Building.IsValid, Building.IsDownsizeable ), Not( ShouldAskConfirmation( Building.Downsize ) ) ), Not(Building.IsMilitaryBuilding))]"
						using = tooltip_below
					}

					### DOWNSIZE WITH CONFIRMATION
					button_icon_minus_action = {
						size = { 28 28 }
						parentanchor = vcenter
						position = { 5 0 }
						tooltip = "[Building.GetDownsizeTooltip]"
						onclick = "[PopupManager.AskConfirmation( Building.Downsize )]"
						enabled = "[IsValid( Building.Downsize )]"
						visible = "[And(And( And( Building.IsValid, Building.IsDownsizeable ), ShouldAskConfirmation( Building.Downsize ) ), Not(Building.IsMilitaryBuilding))]"
						using = tooltip_below
					}

					### CANCEL CONSTRUCTION
					button_icon_minus_action = {
						size = { 28 28 }
						parentanchor = vcenter
						position = { 5 0 }
						tooltip = "[Building.GetCancelConstructionTooltip]"
						visible = "[And(IsValid( Building.CancelConstruction ), Not(Building.IsMilitaryBuilding))]"
						onclick = "[Execute( Building.CancelConstruction )]"
						using = tooltip_below
					}

					### EXPAND BUTTON
					expand_building_button = {
						parentanchor = vcenter|right

						block "expand_button_placement" {
							position = { -5 0 }
						}
						
						blockoverride "button_size" {
							size = { 28 28 }
						}
					}

					
				}
				
				# Employee
				widget = {
					size = { 135 30 }
					widget = {
						parentanchor = top|hcenter
						visible = "[Building.IsActive]"
						position = { 0 6 }
						size = { 126 20 }
						alpha = "[TransparentIfFalse(Building.IsActive)]"
						default_progressbar_horizontal = {
							tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
							size = { 100% 100% }

							blockoverride "values" {
								value = "[FixedPointToFloat(Building.GetEmploymentPercentage)]"
								min = 0
								max = 1
							}
						}

						container ={
							visible = "[Not(LessThan_CFixedPoint(Building.GetEmploymentPercentage, GetDefine('NGUI', 'BUILDING_CONSIDERED_FULLY_EMPLOYED')))]"
							parentanchor = vcenter|hcenter
							textbox = {
								text = "[Building.GetNoOfEmployed|1*]"
								margin_bottom = 5
								margin_top = 5
								align = center|nobaseline
								autoresize = yes
								tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
							}
						}
						flowcontainer = {
							parentanchor = vcenter|hcenter
							visible = "[LessThan_CFixedPoint(Building.GetEmploymentPercentage, GetDefine('NGUI', 'BUILDING_CONSIDERED_FULLY_EMPLOYED'))]"
							textbox = {
								text = "[Building.GetNoOfEmployed|1*]"
								margin_bottom = 5
								margin_top = 5
								align = hcenter|nobaseline
								autoresize = yes
								parentanchor = vcenter
								widgetanchor = vcenter
								tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
							}
							
							textbox = {
								text = " / [Building.GetEmployeeCap|1*]"
								align = hcenter|nobaseline
								autoresize = yes
								parentanchor = vcenter
								widgetanchor = vcenter
								tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
							}
						}
					}
				}
				
			}
		}
	}
}